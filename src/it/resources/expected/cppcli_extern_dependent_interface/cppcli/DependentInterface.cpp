// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from cppcli_extern_dependent_interface.djinni

#include "DependentInterface.hpp"  // my header
#include "djinni/cppcli/Error.hpp"
#include "djinni/cppcli/Marshal.hpp"
#include "djinni/cppcli/WrapperCache.hpp"

ref class DependentInterfaceCppProxy : public DependentInterface {
    using CppType = std::shared_ptr<::DependentInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    DependentInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    void MethodTakingInterfaceDependency(InterfaceDependency^ dep) override {
        try {
            _cppRefHandle->get()->method_taking_interface_dependency(::InterfaceDependency::ToCpp(dep));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    void MethodTakingOptionalInterfaceDependency(InterfaceDependency^ dep) override {
        try {
            _cppRefHandle->get()->method_taking_optional_interface_dependency(::djinni::Optional<std::optional, ::InterfaceDependency>::ToCpp(dep));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    InterfaceDependency^ MethodReturningInterfaceDependency() override {
        try {
            auto cs_result = _cppRefHandle->get()->method_returning_interface_dependency();
            return ::InterfaceDependency::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    InterfaceDependency^ MethodReturningOptionalInterfaceDependency() override {
        try {
            auto cs_result = _cppRefHandle->get()->method_returning_optional_interface_dependency();
            return ::djinni::Optional<std::optional, ::InterfaceDependency>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

DependentInterface::CppType DependentInterface::ToCpp(DependentInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<DependentInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

DependentInterface::CsType DependentInterface::FromCppOpt(const DependentInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<DependentInterfaceCppProxy^>(cpp);
}
