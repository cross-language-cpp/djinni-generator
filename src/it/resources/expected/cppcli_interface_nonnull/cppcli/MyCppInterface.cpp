// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from cppcli_interface_nonnull.djinni

#include "MyCppInterface.hpp"  // my header
#include "djinni/cppcli/Error.hpp"
#include "djinni/cppcli/Marshal.hpp"
#include "djinni/cppcli/WrapperCache.hpp"

int MyCppInterface::GetVersion() {
    try {
        auto cs_result = ::MyCppInterface::get_version();
        return ::djinni::I32::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

ref class MyCppInterfaceCppProxy : public MyCppInterface {
    using CppType = std::shared_ptr<::MyCppInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    MyCppInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    void MethodReturningNothing(int value) override {
        try {
            _cppRefHandle->get()->method_returning_nothing(::djinni::I32::ToCpp(value));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    int MethodReturningSomeType(System::String^ key) override {
        try {
            auto cs_result = _cppRefHandle->get()->method_returning_some_type(::djinni::String::ToCpp(key));
            return ::djinni::I32::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return 0; // Unreachable! (Silencing compiler warnings.)
    }

    int MethodChangingNothing() override {
        try {
            auto cs_result = _cppRefHandle->get()->method_changing_nothing();
            return ::djinni::I32::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return 0; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

MyCppInterface::CppType MyCppInterface::ToCpp(MyCppInterface::CsType cs)
{
    if (!cs) {
        throw gcnew System::Exception("MyCppInterface::ToCpp requires non-nil object.");
    }
    return NN_CHECK_ASSERT(dynamic_cast<MyCppInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object());
}

MyCppInterface::CsType MyCppInterface::FromCppOpt(const MyCppInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<MyCppInterfaceCppProxy^>(cpp);
}
