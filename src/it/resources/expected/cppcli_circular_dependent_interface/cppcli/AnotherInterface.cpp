// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from cppcli_circular_dependent_interface.djinni

#include "AnotherInterface.hpp"  // my header
#include "djinni/cppcli/Error.hpp"
#include "djinni/cppcli/Marshal.hpp"
#include "djinni/cppcli/WrapperCache.hpp"
#include "one_interface.hpp"

ref class AnotherInterfaceCppProxy : public AnotherInterface {
    using CppType = std::shared_ptr<::AnotherInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    AnotherInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    void MethodTakingOneInterface(OneInterface^ dep) override {
        try {
            _cppRefHandle->get()->method_taking_one_interface(::OneInterface::ToCpp(dep));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    void MethodTakingOptionalOneInterface(OneInterface^ dep) override {
        try {
            _cppRefHandle->get()->method_taking_optional_one_interface(::djinni::Optional<std::optional, ::OneInterface>::ToCpp(dep));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    OneInterface^ MethodReturningOneInterface() override {
        try {
            auto cs_result = _cppRefHandle->get()->method_returning_one_interface();
            return ::OneInterface::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    OneInterface^ MethodReturningOptionalOneInterface() override {
        try {
            auto cs_result = _cppRefHandle->get()->method_returning_optional_one_interface();
            return ::djinni::Optional<std::optional, ::OneInterface>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

AnotherInterface::CppType AnotherInterface::ToCpp(AnotherInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<AnotherInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

AnotherInterface::CsType AnotherInterface::FromCppOpt(const AnotherInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<AnotherInterfaceCppProxy^>(cpp);
}
