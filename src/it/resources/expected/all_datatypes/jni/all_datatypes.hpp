// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from all_datatypes.djinni

#pragma once

#include "all_datatypes.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class AllDatatypes final {
public:
    using CppType = ::AllDatatypes;
    using JniType = jobject;

    using Boxed = AllDatatypes;

    ~AllDatatypes();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    AllDatatypes();
    friend ::djinni::JniClass<AllDatatypes>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("djinni/it/AllDatatypes") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(ZBSIJFDLjava/lang/String;[BLjava/util/Date;Ljava/util/ArrayList;Ljava/util/HashSet;Ljava/util/HashMap;Ljava/lang/Boolean;)V") };
    const jfieldID field_booleanData { ::djinni::jniGetFieldID(clazz.get(), "booleanData", "Z") };
    const jfieldID field_integer8Data { ::djinni::jniGetFieldID(clazz.get(), "integer8Data", "B") };
    const jfieldID field_integer16Data { ::djinni::jniGetFieldID(clazz.get(), "integer16Data", "S") };
    const jfieldID field_integer32Data { ::djinni::jniGetFieldID(clazz.get(), "integer32Data", "I") };
    const jfieldID field_integer64Data { ::djinni::jniGetFieldID(clazz.get(), "integer64Data", "J") };
    const jfieldID field_float32Data { ::djinni::jniGetFieldID(clazz.get(), "float32Data", "F") };
    const jfieldID field_float64Data { ::djinni::jniGetFieldID(clazz.get(), "float64Data", "D") };
    const jfieldID field_stringData { ::djinni::jniGetFieldID(clazz.get(), "stringData", "Ljava/lang/String;") };
    const jfieldID field_binaryData { ::djinni::jniGetFieldID(clazz.get(), "binaryData", "[B") };
    const jfieldID field_dateData { ::djinni::jniGetFieldID(clazz.get(), "dateData", "Ljava/util/Date;") };
    const jfieldID field_listData { ::djinni::jniGetFieldID(clazz.get(), "listData", "Ljava/util/ArrayList;") };
    const jfieldID field_setData { ::djinni::jniGetFieldID(clazz.get(), "setData", "Ljava/util/HashSet;") };
    const jfieldID field_mapData { ::djinni::jniGetFieldID(clazz.get(), "mapData", "Ljava/util/HashMap;") };
    const jfieldID field_optionalData { ::djinni::jniGetFieldID(clazz.get(), "optionalData", "Ljava/lang/Boolean;") };
};

}  // namespace djinni_generated
