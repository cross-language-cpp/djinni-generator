// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from all_datatypes.djinni

#include "AllDatatypes.hpp"  // my header
#include "djinni/cppcli/Marshal.hpp"
#include <memory>

AllDatatypes::AllDatatypes(bool booleanData,
                           char integer8Data,
                           short integer16Data,
                           int integer32Data,
                           __int64 integer64Data,
                           float float32Data,
                           double float64Data,
                           System::String^ stringData,
                           array<System::Byte>^ binaryData,
                           System::DateTime dateData,
                           System::Collections::Generic::List<bool>^ listData,
                           System::Collections::Generic::HashSet<bool>^ setData,
                           System::Collections::Generic::Dictionary<char, bool>^ mapData,
                           System::Nullable<bool> optionalData)
: _booleanData(booleanData)
, _integer8Data(integer8Data)
, _integer16Data(integer16Data)
, _integer32Data(integer32Data)
, _integer64Data(integer64Data)
, _float32Data(float32Data)
, _float64Data(float64Data)
, _stringData(stringData)
, _binaryData(binaryData)
, _dateData(dateData)
, _listData(listData)
, _setData(setData)
, _mapData(mapData)
, _optionalData(optionalData)
{}

bool AllDatatypes::BooleanData::get()
{
    return _booleanData;
}

char AllDatatypes::Integer8Data::get()
{
    return _integer8Data;
}

short AllDatatypes::Integer16Data::get()
{
    return _integer16Data;
}

int AllDatatypes::Integer32Data::get()
{
    return _integer32Data;
}

__int64 AllDatatypes::Integer64Data::get()
{
    return _integer64Data;
}

float AllDatatypes::Float32Data::get()
{
    return _float32Data;
}

double AllDatatypes::Float64Data::get()
{
    return _float64Data;
}

System::String^ AllDatatypes::StringData::get()
{
    return _stringData;
}

array<System::Byte>^ AllDatatypes::BinaryData::get()
{
    return _binaryData;
}

System::DateTime AllDatatypes::DateData::get()
{
    return _dateData;
}

System::Collections::Generic::List<bool>^ AllDatatypes::ListData::get()
{
    return _listData;
}

System::Collections::Generic::HashSet<bool>^ AllDatatypes::SetData::get()
{
    return _setData;
}

System::Collections::Generic::Dictionary<char, bool>^ AllDatatypes::MapData::get()
{
    return _mapData;
}

System::Nullable<bool> AllDatatypes::OptionalData::get()
{
    return _optionalData;
}

System::String^ AllDatatypes::ToString()
{
    return System::String::Format("AllDatatypes {{BooleanData{0}, Integer8Data{1}, Integer16Data{2}, Integer32Data{3}, Integer64Data{4}, Float32Data{5}, Float64Data{6}, StringData{7}, BinaryData{8}, DateData{9}, ListData{10}, SetData{11}, MapData{12}, OptionalData{13}}}",
                                  BooleanData,
                                  Integer8Data,
                                  Integer16Data,
                                  Integer32Data,
                                  Integer64Data,
                                  Float32Data,
                                  Float64Data,
                                  StringData,
                                  BinaryData,
                                  DateData,
                                  ListData,
                                  SetData,
                                  MapData,
                                  OptionalData);
}

AllDatatypes::CppType AllDatatypes::ToCpp(AllDatatypes::CsType cs)
{
    ASSERT(cs != nullptr);
    return {::djinni::Bool::ToCpp(cs->BooleanData),
            ::djinni::I8::ToCpp(cs->Integer8Data),
            ::djinni::I16::ToCpp(cs->Integer16Data),
            ::djinni::I32::ToCpp(cs->Integer32Data),
            ::djinni::I64::ToCpp(cs->Integer64Data),
            ::djinni::F32::ToCpp(cs->Float32Data),
            ::djinni::F64::ToCpp(cs->Float64Data),
            ::djinni::String::ToCpp(cs->StringData),
            ::djinni::Binary::ToCpp(cs->BinaryData),
            ::djinni::Date::ToCpp(cs->DateData),
            ::djinni::List<::djinni::Bool>::ToCpp(cs->ListData),
            ::djinni::Set<::djinni::Bool>::ToCpp(cs->SetData),
            ::djinni::Map<::djinni::I8, ::djinni::Bool>::ToCpp(cs->MapData),
            ::djinni::Optional<std::optional, ::djinni::Bool>::ToCpp(cs->OptionalData)};
}

AllDatatypes::CsType AllDatatypes::FromCpp(const AllDatatypes::CppType& cpp)
{
    return gcnew AllDatatypes(::djinni::Bool::FromCpp(cpp.booleanData),
                              ::djinni::I8::FromCpp(cpp.integer8Data),
                              ::djinni::I16::FromCpp(cpp.integer16Data),
                              ::djinni::I32::FromCpp(cpp.integer32Data),
                              ::djinni::I64::FromCpp(cpp.integer64Data),
                              ::djinni::F32::FromCpp(cpp.float32Data),
                              ::djinni::F64::FromCpp(cpp.float64Data),
                              ::djinni::String::FromCpp(cpp.stringData),
                              ::djinni::Binary::FromCpp(cpp.binaryData),
                              ::djinni::Date::FromCpp(cpp.dateData),
                              ::djinni::List<::djinni::Bool>::FromCpp(cpp.listData),
                              ::djinni::Set<::djinni::Bool>::FromCpp(cpp.setData),
                              ::djinni::Map<::djinni::I8, ::djinni::Bool>::FromCpp(cpp.mapData),
                              ::djinni::Optional<std::optional, ::djinni::Bool>::FromCpp(cpp.optionalData));
}
