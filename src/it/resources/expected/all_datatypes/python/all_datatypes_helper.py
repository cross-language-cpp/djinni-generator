# AUTOGENERATED FILE - DO NOT MODIFY!
# This file was generated by Djinni from all_datatypes.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBinary, CPyBoxedBool, CPyDate, CPyEnum, CPyObject, CPyObject, CPyObjectProxy, CPyPrimitive, CPyRecord, CPyString

from dh__list_bool import ListBoolHelper
from dh__map_int8_t_bool import MapInt8TBoolHelper
from dh__map_int8_t_bool import MapInt8TBoolProxy
from dh__set_bool import SetBoolHelper
from dh__set_bool import SetBoolProxy
from enum_data import EnumData
from _cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from all_datatypes import AllDatatypes

class AllDatatypesHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("bool(struct DjinniRecordHandle *)")
    def get_all_datatypes_f1(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).booleanData)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int8_t(struct DjinniRecordHandle *)")
    def get_all_datatypes_f2(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).integer8Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int16_t(struct DjinniRecordHandle *)")
    def get_all_datatypes_f3(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).integer16Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int32_t(struct DjinniRecordHandle *)")
    def get_all_datatypes_f4(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).integer32Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int64_t(struct DjinniRecordHandle *)")
    def get_all_datatypes_f5(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).integer64Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("float(struct DjinniRecordHandle *)")
    def get_all_datatypes_f6(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).float32Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("double(struct DjinniRecordHandle *)")
    def get_all_datatypes_f7(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).float64Data)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f8(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).stringData) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniBinary *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f9(cself):
        try:
            with CPyBinary.fromPy(CPyRecord.toPy(None, cself).binaryData) as py_obj:
                _ret = py_obj.release_djinni_binary()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("uint64_t(struct DjinniRecordHandle *)")
    def get_all_datatypes_f10(cself):
        try:
            _ret = CPyDate.fromPy(CPyRecord.toPy(None, cself).dateData)
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f11(cself):
        try:
            _ret = CPyObject.fromPy(ListBoolHelper.c_data_set, CPyRecord.toPy(None, cself).listData)
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f12(cself):
        try:
            _ret = CPyObjectProxy.fromPy(SetBoolHelper.c_data_set, SetBoolProxy(CPyRecord.toPy(None, cself).setData))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f13(cself):
        try:
            _ret = CPyObjectProxy.fromPy(MapInt8TBoolHelper.c_data_set, MapInt8TBoolProxy(CPyRecord.toPy(None, cself).mapData))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniBoxedBool *(struct DjinniRecordHandle *)")
    def get_all_datatypes_f14(cself):
        try:
            with CPyBoxedBool.fromPyOpt(CPyRecord.toPy(None, cself).optionalData) as py_obj:
                return py_obj.release_djinni_boxed()
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int(struct DjinniRecordHandle *)")
    def get_all_datatypes_f15(cself):
        try:
            _ret = CPyEnum.fromPy(CPyRecord.toPy(None, cself).enum_data)
            assert _ret != -1
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(bool,int8_t,int16_t,int32_t,int64_t,float,double,struct DjinniString *,struct DjinniBinary *,uint64_t,struct DjinniObjectHandle *,struct DjinniObjectHandle *,struct DjinniObjectHandle *,struct DjinniBoxedBool *,int)")
    def create_all_datatypes(booleanData,integer8Data,integer16Data,integer32Data,integer64Data,float32Data,float64Data,stringData,binaryData,dateData,listData,setData,mapData,optionalData,enum_data):
        py_rec = AllDatatypes(
            CPyPrimitive.toPy(booleanData),
            CPyPrimitive.toPy(integer8Data),
            CPyPrimitive.toPy(integer16Data),
            CPyPrimitive.toPy(integer32Data),
            CPyPrimitive.toPy(integer64Data),
            CPyPrimitive.toPy(float32Data),
            CPyPrimitive.toPy(float64Data),
            CPyString.toPy(stringData),
            CPyBinary.toPy(binaryData),
            CPyDate.toPy(dateData),
            CPyObject.toPy(ListBoolHelper.c_data_set, listData),
            CPyObjectProxy.toPyObj(SetBoolHelper.c_data_set, setData),
            CPyObjectProxy.toPyObj(MapInt8TBoolHelper.c_data_set, mapData),
            CPyBoxedBool.toPyOpt(optionalData),
            CPyEnum.toPy(EnumData, enum_data))
        return CPyRecord.fromPy(AllDatatypes.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in AllDatatypes.c_data_set
        AllDatatypes.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.all_datatypes_add_callback___delete(AllDatatypesHelper.__delete)
        lib.all_datatypes_add_callback_create_all_datatypes(AllDatatypesHelper.create_all_datatypes)
        lib.all_datatypes_add_callback_get_all_datatypes_f1(AllDatatypesHelper.get_all_datatypes_f1)
        lib.all_datatypes_add_callback_get_all_datatypes_f10(AllDatatypesHelper.get_all_datatypes_f10)
        lib.all_datatypes_add_callback_get_all_datatypes_f11(AllDatatypesHelper.get_all_datatypes_f11)
        lib.all_datatypes_add_callback_get_all_datatypes_f12(AllDatatypesHelper.get_all_datatypes_f12)
        lib.all_datatypes_add_callback_get_all_datatypes_f13(AllDatatypesHelper.get_all_datatypes_f13)
        lib.all_datatypes_add_callback_get_all_datatypes_f14(AllDatatypesHelper.get_all_datatypes_f14)
        lib.all_datatypes_add_callback_get_all_datatypes_f15(AllDatatypesHelper.get_all_datatypes_f15)
        lib.all_datatypes_add_callback_get_all_datatypes_f2(AllDatatypesHelper.get_all_datatypes_f2)
        lib.all_datatypes_add_callback_get_all_datatypes_f3(AllDatatypesHelper.get_all_datatypes_f3)
        lib.all_datatypes_add_callback_get_all_datatypes_f4(AllDatatypesHelper.get_all_datatypes_f4)
        lib.all_datatypes_add_callback_get_all_datatypes_f5(AllDatatypesHelper.get_all_datatypes_f5)
        lib.all_datatypes_add_callback_get_all_datatypes_f6(AllDatatypesHelper.get_all_datatypes_f6)
        lib.all_datatypes_add_callback_get_all_datatypes_f7(AllDatatypesHelper.get_all_datatypes_f7)
        lib.all_datatypes_add_callback_get_all_datatypes_f8(AllDatatypesHelper.get_all_datatypes_f8)
        lib.all_datatypes_add_callback_get_all_datatypes_f9(AllDatatypesHelper.get_all_datatypes_f9)

AllDatatypesHelper._add_callbacks()

