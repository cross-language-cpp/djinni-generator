// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from requires.djinni

package djinni.it;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RequiresInterface {
    public abstract boolean someMethod();

    private static final class CppProxy extends RequiresInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public boolean someMethod()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_someMethod(this.nativeRef);
        }
        private native boolean native_someMethod(long _nativeRef);

        @Override
        public boolean equals(Object obj) {
            assert !this.destroyed.get() : "trying to use a destroyed object";

            if (!(obj instanceof RequiresInterface)) {
                return false;
            }

            return native_operator_equals(this.nativeRef, (RequiresInterface)obj);
        }
        private native boolean native_operator_equals(long _nativeRef, RequiresInterface other);

        @Override
        public int hashCode() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hash_code(this.nativeRef);
        }
        private native int native_hash_code(long _nativeRef);
    }
}
