# AUTOGENERATED FILE - DO NOT MODIFY!
# This file was generated by Djinni from my_cpp_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyString

from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from _cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class MyCppInterface(with_metaclass(ABCMeta)):
    """
    Constants
        VERSION: Interfaces can also have constants
    """

    VERSION = 1

    @abstractmethod
    def method_returning_nothing(self, value):
        raise NotImplementedError

    @abstractmethod
    def method_returning_some_type(self, key):
        raise NotImplementedError

    @abstractmethod
    def method_changing_nothing(self):
        raise NotImplementedError

    @staticmethod
    def get_version():
        return MyCppInterfaceCppProxy.get_version()


class MyCppInterfaceCppProxy(MyCppInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.my_cpp_interface___wrapper_dec_ref(self._cpp_impl)

    def method_returning_nothing(self, value):
        lib.cw__my_cpp_interface_method_returning_nothing(self._cpp_impl, CPyPrimitive.fromPy(value))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def method_returning_some_type(self, key):
        with CPyString.fromPy(key) as pys_key:
            _ret_c = lib.cw__my_cpp_interface_method_returning_some_type(self._cpp_impl, pys_key.release_djinni_string())
            CPyException.toPyCheckAndRaise(_ret_c)
            _ret = CPyPrimitive.toPy(_ret_c)
            assert _ret is not None
            return _ret

    def method_changing_nothing(self):
        _ret_c = lib.cw__my_cpp_interface_method_changing_nothing(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_version():
        _ret_c = lib.cw__my_cpp_interface_get_version()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

class MyCppInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return MyCppInterfaceCppProxy(obj)

