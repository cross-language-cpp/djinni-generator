// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from all_datatypes_json.djinni

#pragma once

#include "enum_data.hpp"
#include "json+extension.hpp"
#include <algorithm>
#include <nlohmann/json.hpp>

namespace nlohmann {

template<>
struct adl_serializer<::custom_namespace::EnumData>
{
    static void to_json(json& j, ::custom_namespace::EnumData e)
    {
        static const std::pair<::custom_namespace::EnumData, json> m[] = {{::custom_namespace::EnumData::FIRSTENUMVALUE,"FirstEnumValue"},{::custom_namespace::EnumData::SECONDENUMVALUE,"SecondEnumValue"}};
        auto it = std::find_if(std::begin(m), std::end(m),
                               [e](const std::pair<::custom_namespace::EnumData, json>& ej_pair) -> bool
        {
            return ej_pair.first == e;
        });
        j = ((it != std::end(m)) ? it : std::begin(m))->second;
    }
    static void from_json(const json& j, ::custom_namespace::EnumData& e)
    {
        static const std::pair<::custom_namespace::EnumData, json> m[] = {{::custom_namespace::EnumData::FIRSTENUMVALUE,"FirstEnumValue"},{::custom_namespace::EnumData::SECONDENUMVALUE,"SecondEnumValue"}};
        auto it = std::find_if(std::begin(m), std::end(m),
                               [j](const std::pair<::custom_namespace::EnumData, json>& ej_pair) -> bool
        {
            return ej_pair.second == j;
        });
        e = ((it != std::end(m)) ? it : std::begin(m))->first;
    }
};

}  // namespace nlohmann
