// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from all_json_specialized_datatypes.djinni

#pragma once

#include "json+extension.hpp"
#include "my_enum.hpp"
#include <algorithm>
#include <nlohmann/json.hpp>

namespace custom_namespace {

static void to_json(nlohmann::json& j, my_enum e)
{
    static const std::pair<my_enum, nlohmann::json> m[] = {{my_enum::FIRSTENUMVALUE,"FirstEnumValue"},{my_enum::SECONDENUMVALUE,"SecondEnumValue"}};
    auto it = std::find_if(std::begin(m), std::end(m),
                           [e](const std::pair<my_enum, nlohmann::json>& ej_pair) -> bool
    {
        return ej_pair.first == e;
    });
    j = ((it != std::end(m)) ? it : std::begin(m))->second;
}
static void from_json(const nlohmann::json& j, my_enum& e)
{
    static const std::pair<my_enum, nlohmann::json> m[] = {{my_enum::FIRSTENUMVALUE,"FirstEnumValue"},{my_enum::SECONDENUMVALUE,"SecondEnumValue"}};
    auto it = std::find_if(std::begin(m), std::end(m),
                           [j](const std::pair<my_enum, nlohmann::json>& ej_pair) -> bool
    {
        return ej_pair.second == j;
    });
    e = ((it != std::end(m)) ? it : std::begin(m))->first;
}

}  // namespace custom_namespace
