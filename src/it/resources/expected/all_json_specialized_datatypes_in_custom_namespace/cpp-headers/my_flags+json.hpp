// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from all_json_specialized_datatypes.djinni

#pragma once

#include "json+extension.hpp"
#include "my_flags.hpp"
#include <algorithm>
#include <nlohmann/json.hpp>

namespace nlohmann {

template<>
struct adl_serializer<::custom_namespace::MyFlags>
{
    static void to_json(json& j, ::custom_namespace::MyFlags e)
    {
        static const std::pair<::custom_namespace::MyFlags, json> m[] = {{::custom_namespace::MyFlags::FLAG1,"flag1"},{::custom_namespace::MyFlags::FLAG2,"flag2"}};
        j = json::array();
        for(const auto& flagOption : m)
        {
            if(static_cast<unsigned>(e & flagOption.first) != 0)
            {
                j.push_back(flagOption.second);
            }
        }
    }
    static void from_json(const json& j, ::custom_namespace::MyFlags& e)
    {
        static const std::pair<::custom_namespace::MyFlags, json> m[] = {{::custom_namespace::MyFlags::FLAG1,"flag1"},{::custom_namespace::MyFlags::FLAG2,"flag2"}};
        e = static_cast<::custom_namespace::MyFlags>(0);
        for(const auto& flagName : j)
        {
            auto it = std::find_if(std::begin(m), std::end(m),
                                   [flagName](const std::pair<::custom_namespace::MyFlags, json>& ej_pair) -> bool
            {
                return ej_pair.second == flagName;
            });
            if(it != std::end(m))
            {
                e |= it->first;
            }
        }
    }
};

}  // namespace nlohmann
