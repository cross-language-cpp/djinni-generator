// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni
#include <stdexcept>
#include "HexUtils.hpp" 
namespace djinni
{
    namespace js
    {

        std::vector<uint8_t> hex::toByteArray(const std::string &str)
        {
            std::vector<uint8_t> bytes(str.length() / 2 + str.length() % 2);
            auto offset = str.length() % 2 != 0 ? 1 : 0;
            uint8_t byte = 0;
            for (auto index = 0; index < bytes.size(); index++)
            {
                if (index == 0 && str.length() % 2 != 0)
                {
                    byte = hex::digitToByte(str[0]);
                }
                else
                {
                    byte = hex::digitToByte(str[index * 2 - offset]) << 4;
                    byte = byte + (hex::digitToByte(str[index * 2 + 1 - offset]));
                }
                bytes[index] = byte;
            }
            return bytes;
        }
        uint8_t hex::digitToByte(char c)
        {
            if (c >= '0' && c <= '9')
            {
                return (uint8_t)(c - '0');
            }
            else if (c >= 'a' && c <= 'f')
            {
                return (uint8_t)(0x0A + c - 'a');
            }
            else if (c >= 'A' && c <= 'F')
            {
                return (uint8_t)(0x0A + c - 'A');
            }
            throw std::invalid_argument("Invalid hex character");
        }
        std::string hex::toString(const std::vector<uint8_t>& data, bool uppercase)
        {
            std::string str(data.size() * 2, '0');
            for (auto index = 0; index < data.size(); index++)
            {
                str[index * 2] = byteToDigit(data[index] >> 4, uppercase);
                str[index * 2 + 1] = byteToDigit((uint8_t) (data[index] & 0xF), uppercase);
            }
            return str;
        }
        std::string hex::toString(const std::vector<uint8_t>& data)
        {
            return toString(data, false);
        }
        char hex::byteToDigit(uint8_t byte, bool uppercase)
        {
            byte = (uint8_t) (0xF < byte ? 0xF : byte);
            if (byte < 0xA)
            {
                return '0' + byte;
            }
            else if (uppercase)
            {
                return (char)('A' + (byte - 0xA));
            }
            else
            {
                return (char)('a' + (byte - 0xA));
            }
        }
    } //js
} // djinni
